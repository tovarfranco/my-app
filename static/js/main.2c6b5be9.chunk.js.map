{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinner","onClick","value","Board","i","key","this","squares","winners","includes","rows","j","push","renderSquare","React","Component","Game","state","history","Array","fill","lastSquare","sortOrder","stepNumber","xIsNext","step","setState","slice","length","calculateWinner","winner","concat","status","current","moves","map","move","desc","jumpTo","toString","Math","floor","reverse","winningLine","handleClick","toggleSort","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c6b5be9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props){\n    return (\n        <button \n            className={props.isWinner ? \"square winner\" : \"square\"}\n            onClick={props.onClick} >\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n\n    renderSquare(i) {\n        return (\n            <Square \n                key={i}\n                value={this.props.squares[i]}\n                isWinner={this.props.winners.includes(i)}\n                onClick={() => this.props.onClick(i)}\n            />);\n    }\n    \n\n    render() {\n        let rows = [];\n        for(var i = 0; i < 3; i++){\n            let squares = [];\n            for(var j = 0; j < 3; j++){\n            squares.push(this.renderSquare(3*i+j));\n            }\n            rows.push(<div key={i} className=\"board-row\">{squares}</div>);\n        }\n        return (\n            <div>{rows}</div>\n        );\n    }\n  }\n  \nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                lastSquare: null,\n                sortOrder: true,\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n    \n    jumpTo(step) {\n        this.setState({\n          stepNumber: step,\n          xIsNext: (step % 2) === 0,\n        });\n    }\n\n    toggleSort(){\n        this.setState({\n            sortOrder: !this.state.sortOrder,\n        });\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares).winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                lastSquare: i,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    render() {\n        let history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares).winner;\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button \n                        onClick={() => this.jumpTo(move)}\n                        className={current.squares === step.squares ? 'strong' : ''}\n                    >{desc} - ({step.lastSquare !== null ? ((step.lastSquare % 3).toString() + ', ' + (Math.floor(step.lastSquare/3).toString())) : 'No moves'})\n                    </button>\n                    \n                </li>\n            )\n        });\n\n        if (this.state.sortOrder)\n        {\n            moves.reverse();\n        }\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else if (moves.length === 10) {\n            status = 'Draw!'\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div>\n            <div className=\"game\">\n            <div className=\"game-board\">\n                <Board \n                    squares={current.squares}\n                    winners={calculateWinner(current.squares).winningLine}\n                    onClick={(i) => this.handleClick(i)}\n                />\n            </div>\n            </div>\n            <div className=\"game\">\n            <div className=\"game-info\">\n                <div>{status}</div>\n                <button\n                    onClick={() => this.toggleSort()}\n                >Sort</button>\n                <ol>{moves}</ol>\n            </div>\n            </div>\n            </div>\n        );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return {winner: squares[a], winningLine: lines[i]};\n      }\n    }\n    return {winner: null, winningLine: []};\n  }"],"sourceRoot":""}